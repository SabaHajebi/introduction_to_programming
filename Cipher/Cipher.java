/* SELF ASSESSMENT
 1. Did I use easy-to-understand meaningful variable names formatted properly (in lowerCamelCase)?
        Mark out of 5: 5
        Comment: All variables are in lowerCamelCase and constants are in full capitals.
 2. Did I indent the code appropriately?
        Mark out of 5: 5
        Comment:  All code is indented using appropriate tabs.
 3. Did I write the createCipher function correctly (parameters, return type and function body) and invoke it correctly?
       Mark out of 20: 20
        Comment: My create cipher function takes in no parameters and instead simply returns a char array which is a randomised mapping of the alphabet (including a space).
 4. Did I write the encrypt function correctly (parameters, return type and function body) and invoke it correctly?
       Mark out of 20: 20
        Comment: My encryption function takes in the input string, as a char array, which you would like to encrypt and also takes in a mapping to use for the encryption as generated by createCipher().
                 It is invoked correctly after creating a mapping in the main function.
 5. Did I write the decrypt function correctly (parameters, return type and function body) and invoke it correctly?
       Mark out of 20: 20
        Comment: My decryption function works the very same as the encryption one in that it takes in the encrypted input as a char array and uses the mapping to decrypt it.
                 It is also invoked correctly in the main function.
 6. Did I write the main function body correctly (repeatedly obtaining a string and encrypting it and then decrypting the encrypted version)?
       Mark out of 25: 25
        Comment: I used a while(true) loop with the scanner to repeatedly ask for input and after each input it will display the input, the mapping, the encrypted version of the input and finally the decrypted version.
 7. How well did I complete this self-assessment?
        Mark out of 5: 5
        Comment: I wrote a comment for each part
 Total Mark out of 100 (Add all the previous marks): 100
*/

import java.util.Random;
import java.util.Scanner;

public class Cipher {

    public static final int ASCII_DIFFERENCE = 97;
    public static final int ASCII_SPACE_DIFFERENCE = 6;
    public static String characters = "abcdefghijklmnopqrstuvwxyz ";
    public static char[] mapping = new char[characters.length()];
    public static char[] input;

    public static void main(String args[]) {
        while(true) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Input a string: ");
            if (scanner.hasNextLine()) {
                String userInput = scanner.nextLine();
                System.out.print("Input: " + userInput.toLowerCase());

                input = userInput.toLowerCase().toCharArray();
                mapping = createCipher();
                encrypt(input, mapping);

                System.out.print("\nMapping: ");
                System.out.print(new String(mapping));

                System.out.print("\nEncrypted String: ");
                System.out.print(new String(input));

                input = decrypt(input, mapping);
                System.out.print("\nDecrypted String: ");
                System.out.println(new String(input) + "\n");
            } else {
                scanner.next();
            }
        }
    }

    public static char[] createCipher() {
        // Randomise the alphabet and space array and return as mapping
        mapping = characters.toCharArray();
        Random generator = new Random();

        for(int index = 0; index < mapping.length; index++) {
            int randomPos = generator.nextInt(mapping.length);
            char temp = mapping[index];
            mapping[index] = mapping[randomPos];
            mapping[randomPos] = temp;
        }
        return mapping;
    }

    public static void encrypt(char[] input, char[] mapping) {
        for(int index = 0; index < input.length; index++) {
            try {
                if(input[index] != ' ') {
                    int charIndex = (int)input[index] - ASCII_DIFFERENCE;
                    input[index] = mapping[charIndex];
                }
                else {
                    int charIndex = (int)input[index] - ASCII_SPACE_DIFFERENCE;
                    input[index] = mapping[charIndex];
                }
            } catch (Exception e) {
                System.out.println("\nYou have entered an invalid character. Every character must be from a to z or a space.");
            }
        }
    }

    public static char[] decrypt(char[] input, char[] mapping) {
        char[] alphabet = characters.toCharArray();
        char[] tempInput = new char[input.length];
        for(int index = 0; index < input.length; index++) {
            for(int charIndex = 0; charIndex < mapping.length; charIndex++) {
                if(input[index] == mapping[charIndex]) {
                    tempInput[index] = alphabet[charIndex];
                }
            }
        }
        return tempInput;
    }

}